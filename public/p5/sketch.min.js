let invertShader, buffer, imgs = [], imgLoaded = false, radiusFactor = 0.7,
    imageDetails = [
        { name: "avocado", x: 420, y: 810, scale: 0.7, angle: 0 },
        { name: "caffe", x: 1320, y: 50, scale: 1, angle: 0 },
        { name: "gambero", x: 1100, y: 840, scale: 1, angle: 0 },
        { name: "patata", x: 1670, y: 600, scale: 0.6, angle: 0 },
        { name: "pomodoro", x: 810, y: 650, scale: 1, angle: 0 },
        { name: "riso", x: 1610, y: 200, scale: 0.8, angle: 0 },
        { name: "salmone", x: 50, y: 50, scale: 1, angle: 0 },
        { name: "soia", x: 800, y: 70, scale: 0.88, angle: 0 },
        { name: "tonno", x: 160, y: 400, scale: 1, angle: 0 },
        { name: "zucchero", x: 550, y: 400, scale: 0.8, angle: 0 },
        { name: "mais", x: 1100, y: 550, scale: 1, angle: -70 }
    ];

function preload() {
    for (let i = 0; i < imageDetails.length; i++) {
        let detail = imageDetails[i];
        imgs[i] = loadImage(`assets/immagini_inv/${detail.name}.png`, () => {
            if (i === imageDetails.length - 1) imgLoaded = true;
            console.log(`Image ${detail.name} loaded successfully`);
        }, error => {
            console.error(`Error loading image ${detail.name}`, error);
        });
    }
    invertShader = loadShader("/p5/invertEffect.vert", "/p5/invertEffect.frag");
}

function setup() {
    createCanvas(windowWidth, windowHeight, WEBGL);
    buffer = createGraphics(windowWidth, windowHeight, WEBGL);
    buffer.noSmooth();
    buffer.noStroke();
    buffer.clear();
    imageDetails.forEach((detail, i) => detail.img = imgs[i]);
    frameRate(30);
}

function draw() {
    if (imgLoaded) {
        background(255);
        imageDetails.forEach(detail => {
            let { x, y, scale: imgScale, angle, img } = detail; // rename scale to imgScale to avoid conflicts
            buffer.resizeCanvas(img.width, img.height);
            buffer.clear();
            buffer.shader(invertShader);
            invertShader.setUniform("resolution", [img.width, img.height]);
            invertShader.setUniform("mouse", [mouseX - x + img.width / 2, img.height - (mouseY - y + img.height / 2)]);
            invertShader.setUniform("maxDist", dist(0, 0, width, height) * radiusFactor);
            invertShader.setUniform("tex", img);
            buffer.push();
            buffer.translate(img.width / 2, img.height / 2);
            buffer.rectMode(CENTER);
            buffer.rect(0, 0, img.width, img.height);
            buffer.pop();
            push();
            translate(x - width / 2, y - height / 2);
            rotateZ(radians(angle));
            scale(imgScale, -imgScale); // use imgScale to avoid conflict with p5.js function
            imageMode(CENTER);
            image(buffer, 0, 0);
            pop();
        });
    }
}

function mouseMoved() {
    redraw();
}

function windowResized() {
    resizeCanvas(windowWidth, windowHeight);
    redraw();
}
